# Plugins
set -g @tmux-plugins "$XDG_DATA_HOME/tmux/plugins/"
set-environment -g TMUX_PLUGIN_MANAGER_PATH "$XDG_DATA_HOME/tmux/plugins/"

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'ins0mniaque/tmux-battery#plugin_interpolated_options' # 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'brennanfee/tmux-paste'

set -g @plugin_interpolated_options 'status-format[0]'
set -g @resurrect-dir "$XDG_DATA_HOME/tmux/resurrect"
set -g @resurrect-processes 'ssh btop'

# Segments
set -g @tmux-segments "$XDG_CONFIG_HOME/tmux/segments"
set-environment -g TMUX_SEGMENT_WAN_DISABLED 1

# Colors
set -g  default-terminal  "tmux-256color"
set -as terminal-features ",alacritty*:RGB"
set -as terminal-features ",kitty*:RGB"
set -as terminal-features ",gnome*:RGB"
set -as terminal-features ",xterm*:RGB"
set -as terminal-features ",screen*:RGB"
set -as terminal-features ",tmux*:RGB"

# Images
set -g allow-passthrough on

# Change the prefix from 'Ctrl-b' to 'Ctrl-Space'
unbind C-b
set -g prefix C-Space
bind -N "Send prefix" C-Space send-prefix

# Switch to another active session on destroy
set -g detach-on-destroy off

# Start with window/pane index 1 (instead of 0)
set -g base-index      1
set -g pane-base-index 1

# Automatically set window title
set  -g set-titles        on
setw -g automatic-rename  on
set  -g set-titles-string "#{client_user}@#h — #W — #{client_width}x#{client_height}"

# Focus events enabled for terminals that support them
set -g focus-events on

# Mouse support
set -g mouse on

# Emacs key bindings in tmux command prompt
set -g status-keys emacs

# Select paths as single words
set -g word-separators " @\"=()[]:'"

# Select using arrow keys
bind -N "Copy Mode" S-Up 'copy-mode; send -X begin-selection; send -X cursor-up'
bind -N "Copy Mode" S-Down 'copy-mode; send -X begin-selection; send -X cursor-down'
bind -N "Copy Mode" S-Left 'copy-mode; send -X begin-selection; send -X cursor-left'
bind -N "Copy Mode" S-Right 'copy-mode; send -X begin-selection; send -X cursor-right'
bind -N "Copy Mode" C-S-Up 'copy-mode; send -X begin-selection; send -X previous-paragraph'
bind -N "Copy Mode" C-S-Down 'copy-mode; send -X begin-selection; send -X next-paragraph'
bind -N "Copy Mode" C-S-Left 'copy-mode; send -X begin-selection; send -X previous-word'
bind -N "Copy Mode" C-S-Right 'copy-mode; send -X begin-selection; send -X next-word'
bind -N "Copy Mode" S-PageUp 'copy-mode; send -X begin-selection; send -X page-up'
bind -N "Copy Mode" S-PageDown 'copy-mode; send -X begin-selection; send -X page-down'
bind -N "Copy Mode" S-Home 'copy-mode; send -X begin-selection; send -X start-of-line'
bind -N "Copy Mode" S-End 'copy-mode; send -X begin-selection; send -X end-of-line'
bind -N "Copy" -T copy-mode c if -F '#{selection_present}' 'send -X copy-selection-and-cancel' 'send -X cancel'
bind -N "Copy" -T copy-mode C-c if -F '#{selection_present}' 'send -X copy-selection-and-cancel' 'send -X cancel'
bind -N "Find" -T copy-mode / send C-s
bind -N "Find" -T copy-mode C-f send C-s
bind -T copy-mode Up if -F '#{selection_present}' 'send -X clear-selection; send -X cursor-up' 'send -X cursor-up'
bind -T copy-mode Down if -F '#{selection_present}' 'send -X clear-selection; send -X cursor-down' 'send -X cursor-down'
bind -T copy-mode Left if -F '#{selection_present}' 'send -X clear-selection; send -X cursor-left' 'send -X cursor-left'
bind -T copy-mode Right if -F '#{selection_present}' 'send -X clear-selection; send -X cursor-right' 'send -X cursor-right'
bind -T copy-mode C-Left if -F '#{selection_present}' 'send -X clear-selection; send -X previous-word' 'send -X previous-word'
bind -T copy-mode C-Right if -F '#{selection_present}' 'send -X clear-selection; send -X next-word' 'send -X next-word'
bind -T copy-mode C-Down if -F '#{selection_present}' 'send -X clear-selection; send -X next-paragraph' 'send -X next-paragraph'
bind -T copy-mode C-Up if -F '#{selection_present}' 'send -X clear-selection; send -X previous-paragraph' 'send -X previous-paragraph'
bind -T copy-mode PageUp if -F '#{selection_present}' 'send -X clear-selection; send -X page-up' 'send -X page-up'
bind -T copy-mode PageDown if -F '#{selection_present}' 'send -X clear-selection; send -X page-down' 'send -X page-down'
bind -T copy-mode Home if -F '#{selection_present}' 'send -X clear-selection; send -X start-of-line' 'send -X start-of-line'
bind -T copy-mode End if -F '#{selection_present}' 'send -X clear-selection; send -X end-of-line' 'send -X end-of-line'
bind -T copy-mode S-Up if -F '#{selection_present}' 'send -X cursor-up' 'send -X begin-selection; send -X cursor-up'
bind -T copy-mode S-Down if -F '#{selection_present}' 'send -X cursor-down' 'send -X begin-selection; send -X cursor-down'
bind -T copy-mode S-Left if -F '#{selection_present}' 'send -X cursor-left' 'send -X begin-selection; send -X cursor-left'
bind -T copy-mode S-Right if -F '#{selection_present}' 'send -X cursor-right' 'send -X begin-selection; send -X cursor-right'
bind -T copy-mode C-S-Left if -F '#{selection_present}' 'send -X previous-word' 'send -X begin-selection; send -X previous-word'
bind -T copy-mode C-S-Right if -F '#{selection_present}' 'send -X next-word' 'send -X begin-selection; send -X next-word'
bind -T copy-mode C-S-Down if -F '#{selection_present}' 'send -X next-paragraph' 'send -X begin-selection; send -X next-paragraph'
bind -T copy-mode C-S-Up if -F '#{selection_present}' 'send -X previous-paragraph' 'send -X begin-selection; send -X previous-paragraph'
bind -T copy-mode S-PageUp if -F '#{selection_present}' 'send -X page-up' 'send -X begin-selection; send -X page-up'
bind -T copy-mode S-PageDown if -F '#{selection_present}' 'send -X page-down' 'send -X begin-selection; send -X page-down'
bind -T copy-mode S-Home if -F '#{selection_present}' 'send -X start-of-line' 'send -X begin-selection; send -X start-of-line'
bind -T copy-mode S-End if -F '#{selection_present}' 'send -X end-of-line' 'send -X begin-selection; send -X end-of-line'

# Colorized choose-tree command
set -g command-alias[90] go="choose-tree -GZ -F '#{?pane_format,#[fg=colour214]#{pane_current_command} #[fg=colour99]#{pane_title},#{?window_format,#[fg=colour39]#{window_name}#{window_flags}#{?#{==:#{window_panes},1}, #{?#{!=:#{window_name},#{pane_current_command}},#[fg=colour214]#{pane_current_command} ,}#[fg=colour99]#{pane_title},},#[fg=colour255]#{?session_grouped, (group #{session_group}: #{session_group_list}),}#{?session_attached,#[fg=colour40](attached),#[fg=colour160](unattached)}}}'"

# Manage windows
bind -N "Create a new window"                                 C-n       new-window -c "#{pane_current_path}"
bind -N "Kill current window"                                 C-q       kill-window
bind -N "Select the next window"                           -r Tab       next-window
bind -N "Select the next window"                           -r C-Tab     next-window
bind -N "Select the previous window"                       -r S-Tab     previous-window  # Not working
bind -N "Select the previous window"                       -r C-S-Tab   previous-window  # Not working
bind -N "Swap the current window with the previous window" -r C-S-Left  swap-window -t -1
bind -N "Swap the current window with the next window"     -r C-S-Right swap-window -t +1

# Split panes
unbind -
bind -N "Split window horizontally" | split-window -h -c "#{pane_current_path}"
bind -N "Split window vertically"   - split-window -v -c "#{pane_current_path}"
bind -N "Split window horizontally" h split-window -h -c "#{pane_current_path}"
bind -N "Split window vertically"   v split-window -v -c "#{pane_current_path}"

# Resize panes
bind -N "Resize the active pane left"  -r M-Left  resize-pane -L 1
bind -N "Resize the active pane right" -r M-Right resize-pane -R 1
bind -N "Resize the active pane up"    -r M-Up    resize-pane -U 1
bind -N "Resize the active pane down"  -r M-Down  resize-pane -D 1

# Switch between panes
bind -N "Select the pane to the left of the active pane"  -r C-Left  select-pane -L
bind -N "Select the pane to the right of the active pane" -r C-Right select-pane -R
bind -N "Select the pane above the active pane"           -r C-Up    select-pane -U
bind -N "Select the pane below the active pane"           -r C-Down  select-pane -D

# Choose session/window/pane
bind -N "Choose a session, window or pane from a list" C-g go

# Popup session
set -g command-alias[606] popup-session=" \
popup -w 60% -h 60% -b rounded \
'tmux new -A -s popup'"

bind -N "Show the popup session" \# popup-session

# Locking
LOCKPRG="lock neo" # "$LOCKPRG" is not inherited

set -g command-alias[1234] lock=" \
set-hook -t '#{session_name}' -g client-attached lock-client; \
set -g lock-command \"$LOCKPRG; tmux set-hook -t '#{session_name}' -gu client-attached\"; \
lock-session; \
set -g lock-command \"$LOCKPRG\""

set -g lock-command "$LOCKPRG"
set -g lock-after-time 0
bind -N "Lock session" l lock
bind -N "Lock screen"  L lock-client

# Pane synchronization
set -g command-alias[555] sync=" \
if -F '#{pane_synchronized}' \
\
    'setw    synchronize-panes        off;          \
     set     pane-active-border-style fg=colour255; \
     set     pane-border-style        fg=colour235; \
     display \"Panes unsynchronized\"' \
\
    'setw     synchronize-panes        on;     \
     set      pane-active-border-style fg=colour160; \
     set      pane-border-style        fg=colour160; \
     display \"Panes synchronized\"'"

bind -N "Toggle pane synchronization" S sync

# Toggle segments
bind -N "Toggle ASCII mode"  C-a run '#{@tmux-segments}/ascii'
bind -N "Toggle WAN segment" C-w run '#{@tmux-segments}/wan --toggle'

# Theme
set  -g message-style                fg=colour255,bg=colour235
set  -g mode-style                   fg=colour255,bg=colour235
set  -g status-style                 fill=colour235,bg=colour235,fg=colour250
set  -g status-left-style            fg=colour242
set  -g status-right-style           fg=colour242
set  -g pane-active-border-style     fg=colour255
set  -g pane-border-style            fg=colour235
setw -g window-status-style          fg=colour245,bg=colour235
setw -g window-status-separator      "#[bg=colour235] "
setw -g window-status-current-style  fg=colour255,bold,bg=colour235
setw -g window-status-activity-style fg=colour208

set -g @batt_color_status_primary_charged     'colour250'
set -g @batt_color_status_primary_charging    'colour82'
set -g @batt_color_status_primary_discharging 'colour250'
set -g @batt_color_status_primary_attached    'colour255'
set -g @batt_color_status_primary_unknown     'colour250'

set -g @batt_color_charge_primary_tier8 'colour82'
set -g @batt_color_charge_primary_tier7 'colour154'
set -g @batt_color_charge_primary_tier6 'colour226'
set -g @batt_color_charge_primary_tier5 'colour220'
set -g @batt_color_charge_primary_tier4 'colour214'
set -g @batt_color_charge_primary_tier3 'colour208'
set -g @batt_color_charge_primary_tier2 'colour202'
set -g @batt_color_charge_primary_tier1 'colour160'

# Full screen
set -g command-alias[533] full-screen="if -F '#{!=:#{status},3}' 'set -g status 3' 'set -g status off'"

bind -N "Toggle full screen" F full-screen

# Status bar
if -F '#{!=:#{status},3}' "set -Fg 'status-format[1]' '#{status-format[0]}'"

set  -g status 3
set  -g status-position  top
set  -g status-justify   absolute-centre
setw -g monitor-activity on

set -g status-left  "#{prefix} | #{p11:prefix2}"
set -g status-right "#{prefix} = for menu"

set -g status-left-length  24
set -g status-right-length 24

# Status bar format
set -g status-format[0] '#[#{status-style}]'

set -ag status-format[0] '#[align=left range=left] '
set -ag status-format[0] '#(#{@tmux-segments}/mode)'
set -ag status-format[0] '#[range=user|caffeinated]#(#{@tmux-segments}/caffeinated)#[range=left] '
set -ag status-format[0] '#[range=user|wan]#(#{@tmux-segments}/wan)#[range=left]'
set -ag status-format[0] '#(#{@tmux-segments}/lan)'
set -ag status-format[0] '#(#{@tmux-segments}/vpn)'
set -ag status-format[0] '#[norange]'

set -ag status-format[0] '#[align=right range=right]'
set -ag status-format[0] '#[range=session|#{session_id}]#(#{@tmux-segments}/session)#[range=right] '
set -ag status-format[0] '#(#{@tmux-segments}/docker)'
set -ag status-format[0] '#(#{@tmux-segments}/ollama)  '
set -ag status-format[0] '#{battery_color_charge_fg}#[bg=colour235]#{battery_icon_charge} '
set -ag status-format[0] '#{battery_color_status_fg}#[bg=colour235]#{battery_percentage}#[bg=colour235] '
set -ag status-format[0] '#(#{@tmux-segments}/clock) '
set -ag status-format[0] '#[norange]'

set -g status-format[2] "#[bg=terminal fg=colour235]#(printf '%%*s' #{client_width} | tr ' ' '▀')"

# Window status format
set -g window-status-format         '#{?pane_synchronized,#I→#[fg=colour160]#W,#I→#W}'
set -g window-status-current-format '#{?pane_synchronized,#I→#[fg=colour160#,bold]#W,#I→#W}'

# Help
set -g command-alias[42] help=" \
popup -w 90% -h 90% -T '#[align=centre]Help' -b rounded -E \
'tmux list-keys -Na -P \"    \" | \
awk \"{gsub(\\\"${HOME}\\\", \\\"~\\\", \\\$0); print}\" | \
awk \"length > 76{\\\$0=substr(\\\$0,0,73)\\\"...\\\"}1\" | \
column -c $(tmux display -p \"#{e|/|:#{e|*|:9,#{client_width}},10}\") | \
{ echo; cat; echo } | less --mouse'"

# Main menu
set -g command-alias[69] main-menu=" \
menu -O -M -T '#[align=centre]tmux #{version}' -x P -y S -b rounded \
-H 'bg=colour239,fg=colour255 bold' \
'Sessions' s 'menu -O -M -T \"#[align=centre]Sessions\" -x 28 -y S -b rounded -H \"bg=colour239,fg=colour255 bold\" #{S:#S \"\" \"switch-client -t #S\" }' \
'Windows'  w 'menu -O -M -T \"#[align=centre]Windows\"  -x 28 -y S -b rounded -H \"bg=colour239,fg=colour255 bold\" #{W:#I→#W \"\" \"select-window -t #I\" }' \
'Panes'    p 'menu -O -M -T \"#[align=centre]Panes\"    -x 28 -y S -b rounded -H \"bg=colour239,fg=colour255 bold\" #{P:#I→#W.#P \"\" \"select-pane -t #P\" }' \
'' \
'Detach'        d detach-client \
'Detach Others' o 'detach-client -a' \
'Kill Server'   X kill-server \
'' \
'New Session'      n   new-session \
'Lock Session'     l   lock \
'Popup Session'    '#' popup-session \
'Save Sessions'    C-s 'run \"#{@tmux-plugins}/tmux-resurrect/scripts/save.sh\"' \
'Restore Sessions' C-r 'run \"#{@tmux-plugins}/tmux-resurrect/scripts/restore.sh\"' \
'' \
'Toggle full screen'     F   full-screen \
'Toggle synchronization' S   sync \
'Toggle ASCII Mode'      C-a 'run \"#{@tmux-segments}/ascii\"' \
'Toggle WAN Segment'     C-w 'run \"#{@tmux-segments}/wan --toggle\"' \
'' \
'Reload Configuration' R 'source ~/.config/tmux/tmux.conf \; display \"Configuration reloaded\"' \
'Help' h help"

# Session menu
set -g command-alias[70] session-menu=" \
menu -O -M -T '#[align=centre]#{session_name}' -t = -x M -y W -b rounded \
-H 'bg=colour239,fg=colour255 bold' \
Next     n 'switch-client -n' \
Previous p 'switch-client -p' \
'' \
Renumber N 'move-window -r' \
Rename   n 'command-prompt -I \"#S\" { rename-session \"%%\" }' \
'' \
'New Session' s new-session \
'New Window'  w new-window"

# Window menu
set -g command-alias[71] window-menu=" \
menu -O -M -T '#[align=centre]#{window_index}:#{window_name}' -t = -x W -y W -b rounded \
-H 'bg=colour239,fg=colour255 bold' \
'#{?#{>:#{session_windows},1},,-}Swap Left'  l 'swap-window -t :-1' \
'#{?#{>:#{session_windows},1},,-}Swap Right' r 'swap-window -t :+1' \
'#{?pane_marked_set,,-}Swap Marked'          s swap-window \
'' \
Kill                          X kill-window \
Respawn                       R 'respawn-window -k' \
'#{?pane_marked,Unmark,Mark}' m 'select-pane -m' \
Rename                        n 'command-prompt -F -I \"#W\" { rename-window -t \"#{window_id}\" \"%%\" }' \
'' \
'New After'  w 'new-window -a' \
'New At End' W new-window"

# Pane menu
set -g command-alias[72] pane-menu=" \
menu -O -M -T '#[align=centre]#{pane_index} (#{pane_id})' -t = -x M -y M -b rounded \
-H 'bg=colour239,fg=colour255 bold' \
'#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}'    < 'send -X history-top' \
'#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}' > 'send -X history-bottom' \
'' \
'#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}' C-r 'if-shell -F \"#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}\" \"copy-mode -t=\" ; send -X -t = search-backward \"#{q:mouse_word}\"' \
'#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}'       C-y 'copy-mode -q ; send -l \"#{q:mouse_word}\"' \
'#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}'       c   'copy-mode -q ; set-buffer \"#{q:mouse_word}\"' \
'#{?mouse_line,Copy Line,}'                                     l   'copy-mode -q ; set-buffer \"#{q:mouse_line}\"' \
Paste                                                           p   'send -K \"#{prefix}\" \"#{?#{==:#{@paste_key},},],#{@paste_key}}\"' \
'' \
'#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}' C-h 'copy-mode -q ; send -l \"#{q:mouse_hyperlink}\"' \
'#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}' h   'copy-mode -q ; set-buffer \"x#{q:mouse_hyperlink}\"' \
'' \
'Toggle Logging'     P   'run \"#{@tmux-plugins}/tmux-logging/scripts/toggle_logging.sh\"' \
'Screen Capture'     M-p 'run \"#{@tmux-plugins}/tmux-logging/scripts/screen_capture.sh\"' \
'Save History'       M-P 'run \"#{@tmux-plugins}/tmux-logging/scripts/save_complete_history.sh\"' \
'Clear Pane History' M-c 'run \"#{@tmux-plugins}/tmux-logging/scripts/clear_history.sh\"'  \
'' \
'Horizontal Split' h 'split-window -h' \
'Vertical Split'   v 'split-window -v' \
'' \
'#{?#{>:#{window_panes},1},,-}Swap Up'   u 'swap-pane -U' \
'#{?#{>:#{window_panes},1},,-}Swap Down' d 'swap-pane -D' \
'#{?pane_marked_set,,-}Swap Marked'      s swap-pane \
'' \
Kill                                                              X kill-pane \
Respawn                                                           R 'respawn-pane -k' \
'#{?pane_marked,Unmark,Mark}'                                     m 'select-pane -m' \
'#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}' z 'resize-pane -Z'"

# Bind menus
bind -N "Help"              ?                          help
bind -N "Show main menu"    =                          main-menu
bind -N "Show main menu"    -n MouseDown1StatusLeft    main-menu
bind -N "Show session menu" -n MouseDown3StatusLeft    session-menu
bind -N "Show session menu" -n M-MouseDown3StatusLeft  session-menu
bind -N "Show session menu" -n MouseDown3StatusRight   session-menu
bind -N "Show session menu" -n M-MouseDown3StatusRight session-menu
bind -N "Show window menu"  -n MouseDown3Status        window-menu
bind -N "Show window menu"  -n M-MouseDown3Status      window-menu
bind -N "Show pane menu"    -n MouseDown3Pane          pane-menu
bind -N "Show pane menu"    -n M-MouseDown3Pane        pane-menu

# Mouse actions
bind -N "Choose a session, window or pane from a list" -n MouseDown1StatusRight   go
bind -N "Toggle status segment"                        -n MouseDown1Status        \
if -F '#{==:#{mouse_status_range},wan}' {
    run '#{@tmux-segments}/wan --toggle'
} {
    if -F '#{==:#{mouse_status_range},caffeinated}' {
        run -b '#{@tmux-segments}/caffeinated --toggle'
    } {
        if -F '#{==:#{mouse_status_range},session}' {
            switch-client -n
        } {
            select-window -t =
        }
    }
}

# Install TMUX plugin manager
if "test ! -d #{@tmux-plugins}/tpm" {
    run 'mkdir -p #{@tmux-plugins} && \
    git clone https://github.com/tmux-plugins/tpm #{@tmux-plugins}/tpm && \
    #{@tmux-plugins}/tpm/bin/install_plugins'
}

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '#{@tmux-plugins}/tpm/tpm'