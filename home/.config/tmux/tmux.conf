# Plugins
set -g @tmux-plugins "~/.config/tmux/plugins"

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'ins0mniaque/tmux-battery#plugin_interpolated_options' # 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-yank'

set -g @plugin_interpolated_options 'status-format[0]'
set -g @resurrect-dir "$XDG_DATA_HOME/tmux/resurrect"

# Segments
set -g @tmux-segments "~/.config/tmux/segments"
set-environment -g TMUX_SEGMENT_WAN_DISABLED 1

# Colors
set -g  default-terminal  "tmux-256color"
set -as terminal-features ",alacritty*:RGB"
set -as terminal-features ",kitty*:RGB"
set -as terminal-features ",gnome*:RGB"
set -as terminal-features ",xterm*:RGB"
set -as terminal-features ",screen*:RGB"
set -as terminal-features ",tmux*:RGB"

# Images
set -g allow-passthrough on

# Change the prefix from 'Ctrl-b' to 'Ctrl-Space'
unbind C-b
set -g prefix C-Space
bind -N "Send prefix" C-Space send-prefix

# Start with window/pane index 1 (instead of 0)
set -g base-index      1
set -g pane-base-index 1

# Automatically set window title
set  -g set-titles        on
setw -g automatic-rename  on
set  -g set-titles-string "#{client_user}@#h — #W — #{client_width}x#{client_height}"

# Mouse support
set -g mouse on

# Emacs key bindings in tmux command prompt
set -g status-keys emacs

# Focus events enabled for terminals that support them
set -g focus-events on

# Manage windows
bind -N "Create a new window"                                 C-n       new-window -c "#{pane_current_path}"
bind -N "Kill current window"                                 C-q       kill-window
bind -N "Select the next window"                           -r Tab       next-window
bind -N "Select the next window"                           -r C-Tab     next-window
bind -N "Select the previous window"                       -r S-Tab     previous-window  # Not working
bind -N "Select the previous window"                       -r C-S-Tab   previous-window  # Not working
bind -N "Swap the current window with the previous window" -r C-S-Left  swap-window -t -1
bind -N "Swap the current window with the next window"     -r C-S-Right swap-window -t +1

# Split panes
unbind -
bind -N "Split window horizontally" | split-window -h -c "#{pane_current_path}"
bind -N "Split window vertically"   - split-window -v -c "#{pane_current_path}"
bind -N "Split window horizontally" h split-window -h -c "#{pane_current_path}"
bind -N "Split window vertically"   v split-window -v -c "#{pane_current_path}"

# Resize panes
bind -N "Resize the active pane left"  -r M-Left  resize-pane -L 1
bind -N "Resize the active pane right" -r M-Right resize-pane -R 1
bind -N "Resize the active pane up"    -r M-Up    resize-pane -U 1
bind -N "Resize the active pane down"  -r M-Down  resize-pane -D 1

# Switch between panes
bind -N "Select the pane to the left of the active pane"  -r C-Left  select-pane -L
bind -N "Select the pane to the right of the active pane" -r C-Right select-pane -R
bind -N "Select the pane above the active pane"           -r C-Up    select-pane -U
bind -N "Select the pane below the active pane"           -r C-Down  select-pane -D

# Choose session/window/pane
bind -N "Choose a session, window or pane from a list" C-g choose-tree -GZ

# Synchronize panes
bind -N "Synchronize panes" S \
    if -F '#{pane_synchronized}' \
    \
        'setw    synchronize-panes        off;          \
         set     pane-active-border-style fg=colour255; \
         set     pane-border-style        fg=colour235; \
         display "Panes unsynchronized"' \
    \
        'setw     synchronize-panes        on;     \
         set      pane-active-border-style fg=colour160; \
         set      pane-border-style        fg=colour160; \
         display "Panes synchronized"'

# Toggle segments
bind -N "Toggle ASCII mode"  C-a run '#{@tmux-segments}/ascii'
bind -N "Toggle WAN segment" C-w run '#{@tmux-segments}/wan --toggle'

# Theme
set  -g message-style                fg=colour255,bg=colour235
set  -g mode-style                   fg=colour255,bg=colour235
set  -g status-style                 fill=colour235,bg=colour235,fg=colour250
set  -g status-left-style            fg=colour242
set  -g status-right-style           fg=colour242
set  -g pane-active-border-style     fg=colour255
set  -g pane-border-style            fg=colour235
setw -g window-status-style          fg=colour245,bg=colour235
setw -g window-status-separator      "#[bg=colour235] "
setw -g window-status-current-style  fg=colour255,bold,bg=colour235
setw -g window-status-activity-style fg=colour208

set -g @batt_color_status_primary_charged 'colour250'
set -g @batt_color_status_primary_charging 'colour82'
set -g @batt_color_status_primary_discharging 'colour250'
set -g @batt_color_status_primary_attached 'colour255'
set -g @batt_color_status_primary_unknown 'colour250'

set -g @batt_color_charge_primary_tier8 'colour82'
set -g @batt_color_charge_primary_tier7 'colour154'
set -g @batt_color_charge_primary_tier6 'colour226'
set -g @batt_color_charge_primary_tier5 'colour220'
set -g @batt_color_charge_primary_tier4 'colour214'
set -g @batt_color_charge_primary_tier3 'colour208'
set -g @batt_color_charge_primary_tier2 'colour202'
set -g @batt_color_charge_primary_tier1 'colour160'

# Status bar
if -F '#{!=:#{status},3}' "set -Fg 'status-format[1]' '#{status-format[0]}'"

set  -g status 3
set  -g status-position  top
set  -g status-justify   absolute-centre
setw -g monitor-activity on

set -g status-left  "#{prefix} | #{p11:prefix2}"
set -g status-right "#{prefix} = for menu"

set -g status-left-length  24
set -g status-right-length 24

# Status bar format
set -g status-format[0] '#[#{status-style}]'

set -ag status-format[0] '#[align=left range=left] '
set -ag status-format[0] '#(#{@tmux-segments}/mode)'
set -ag status-format[0] '#(#{@tmux-segments}/caffeinated) '
set -ag status-format[0] '#[range=user|wan]#(#{@tmux-segments}/wan)#[range=left]'
set -ag status-format[0] '#(#{@tmux-segments}/lan)'
set -ag status-format[0] '#(#{@tmux-segments}/vpn)'
set -ag status-format[0] '#[norange]'

set -ag status-format[0] '#[align=right range=right]'
set -ag status-format[0] '#[range=session|#{session_id}]#(#{@tmux-segments}/session)#[range=right] '
set -ag status-format[0] '#(#{@tmux-segments}/docker) '
set -ag status-format[0] '#{battery_color_charge_fg}#[bg=colour235]#{battery_icon_charge} '
set -ag status-format[0] '#{battery_color_status_fg}#[bg=colour235]#{battery_percentage}#[bg=colour235] '
set -ag status-format[0] '#(#{@tmux-segments}/clock) '
set -ag status-format[0] '#[norange]'

set -g status-format[2] "#[bg=terminal fg=colour235]#(printf '%%*s' #{client_width} | tr ' ' '▀')"

# Window status format
set -g window-status-format         '#{?pane_synchronized,#I→#[fg=colour160]#W,#I→#W}'
set -g window-status-current-format '#{?pane_synchronized,#I→#[fg=colour160#,bold]#W,#I→#W}'

# Help
set -g command-alias[42] help="popup -w 90% -h 90% -T 'Help' -E \
'tmux list-keys -Na | \
awk \"{gsub(\\\"${HOME}\\\", \\\"~\\\", \\\$0); print}\" | \
awk \"length > 76{\\\$0=substr(\\\$0,0,73)\\\"...\\\"}1\" | \
column -c $(tmux display -p \"#{e|/|:#{e|*|:9,#{client_width}},10}\") | \
less --mouse'"

bind -N "Help" ? help

# Menu
set -g command-alias[69] status-menu=" \
menu -O -T 'Menu' -x P -y S \
'Sessions' s 'menu -O -T \"Sessions\" -x P -y S #{S:#S \"\" \"switch-client -t #S\" }' \
'Windows'  w 'menu -O -T \"Windows\"  -x P -y S #{W:#I→#W \"\" \"select-window -t #I\" }' \
'Panes'    p 'menu -O -T \"Panes\"    -x P -y S #{P:#I→#W.#P \"\" \"select-pane -t #P\" }' \
'' \
'Save session'     C-s 'run \"#{@tmux-plugins}/tmux-resurrect/scripts/save.sh\"' \
'Restore session'  C-r 'run \"#{@tmux-plugins}/tmux-resurrect/scripts/restore.sh\"' \
'Detach from tmux' d   detach-client \
'' \
'Toggle ASCII mode'  C-a 'run \"#{@tmux-segments}/ascii\"' \
'Toggle WAN segment' C-w 'run \"#{@tmux-segments}/wan --toggle\"' \
'' \
'Help' h help"

bind -N "Show status menu" = status-menu

# Status bar actions
bind -N "Show status menu"                             -n MouseDown1StatusLeft  status-menu
bind -N "Choose a session, window or pane from a list" -n MouseDown1StatusRight choose-tree -GZ
bind -N "Toggle status segment"                        -n MouseDown1Status      \
if -F '#{==:#{mouse_status_range},wan}' {
    run '#{@tmux-segments}/wan --toggle'
} {
    if -F '#{==:#{mouse_status_range},session}' {
        switch-client -n
    } {
        select-window -t =
    }
}

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '#{@tmux-plugins}/tpm/tpm'