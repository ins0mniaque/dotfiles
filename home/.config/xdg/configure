# XDG Base Directory Specification
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
#
# Track software support: https://wiki.archlinux.org/title/XDG_Base_Directory

# TODO: Panic if XDG not set

# Configure local bin/lib to XDG specification

export PATH="$PATH:$HOME/.local/bin"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/.local/lib"

# Configure less to XDG specification
export LESSKEY="$XDG_CONFIG_HOME/less/keys"
export LESSHISTFILE="$XDG_STATE_HOME/less/history"

# Configure terminfo to XDG specification
export TERMINFO_DIRS="$TERMINFO_DIRS:$XDG_DATA_HOME/terminfo"

# Java
export _JAVA_OPTIONS=-Djava.util.prefs.userRoot="$XDG_CONFIG_HOME"/java

# go
export GOPATH="$XDG_DATA_HOME/go"

# openssl
export RANDFILE="$XDG_DATA_HOME/openssl/rnd"

# docker
export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"

# nuget
export NUGET_PACKAGES="$XDG_DATA_HOME/nuget/packages"

# rust
export CARGO_HOME="$XDG_DATA_HOME/cargo"
export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
export PATH="$CARGO_HOME/bin:$PATH"

# ripgrep
export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME/ripgrep/config"

# screen
# export SCREENRC="$XDG_CONFIG_HOME/screen/screenrc"

# readline
# export INPUTRC="$XDG_CONFIG_HOME"/readline/inputrc

# export ATOM_HOME="$XDG_DATA_HOME/atom"
# export ACKRC="$XDG_CONFIG_HOME/ack/ackrc"
# export AWS_SHARED_CREDENTIALS_FILE="$XDG_CONFIG_HOME/aws/credentials"
# export AWS_CONFIG_FILE="$XDG_CONFIG_HOME/aws/config"
# export CARGO_HOME="$XDG_DATA_HOME/cargo"
# export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"
# export IPYTHONDIR="$XDG_CONFIG_HOME/jupyter"
# export JUPYTER_CONFIG_DIR="$XDG_CONFIG_HOME/jupyter"
# export NODE_REPL_HISTORY="$XDG_DATA_HOME/node_repl_history"
# export INPUTRC="$XDG_CONFIG_HOME/readline/inputrc"
# export PSQLRC="$XDG_CONFIG_HOME/pg/psqlrc"
# export PSQL_HISTORY="$XDG_CACHE_HOME/pg/psql_history"
# export PGPASSFILE="$XDG_CONFIG_HOME/pg/pgpass"
# export PGSERVICEFILE="$XDG_CONFIG_HOME/pg/pg_service.conf"
# export SCREENRC="$XDG_CONFIG_HOME/screen/screenrc"
# export TMUX_TMPDIR="$XDG_RUNTIME_DIR"
# export WGETRC="$XDG_CONFIG_HOME/wgetrc"
# export ANDROID_SDK_HOME="$XDG_CONFIG_HOME/android"
# export WAKATIME_HOME="$XDG_CONFIG_HOME/wakatime"
# export R_ENVIRON_USER="${XDG_CONFIG_HOME:-$HOME/.config}/R/Renviron"


# Configure vim/gvim/neovim to XDG specification
# export GVIMINIT='let $MYGVIMRC = !has("nvim") ? "$XDG_CONFIG_HOME/vim/gvimrc" : "$XDG_CONFIG_HOME/nvim/init.gvim" | so $MYGVIMRC'
# export VIMINIT='let $MYVIMRC = !has("nvim") ? "$XDG_CONFIG_HOME/vim/vimrc" : "$XDG_CONFIG_HOME/nvim/init.vim" | so $MYVIMRC'

# TODO: Embed the following configuration in VIMINIT
#
# set runtimepath^=$XDG_CONFIG_HOME/vim
# set runtimepath+=$XDG_DATA_HOME/vim
# set runtimepath+=$XDG_CONFIG_HOME/vim/after
#
# set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
# set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after
#
# let g:netrw_home = $XDG_DATA_HOME."/vim"
# call mkdir($XDG_DATA_HOME."/vim/spell", 'p')
# set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p')
#
# set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p')
# set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p')
# set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p')
#
# if !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif
