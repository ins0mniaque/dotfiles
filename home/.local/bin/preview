#!/bin/sh

version()
{
    echo "${0##*/}: Multi-format preview script (version 0.1)"
}

usage()
{
    cat <<EOF
Usage: ${0##*/} <options>... <files>...

Options:
  -#, --header              show header
  -m, --margin=<MARGIN>     set header margin to MARGIN columns
  -w, --width=<WIDTH>       set terminal width to WIDTH columns
  -h, --height=<HEIGHT>     set terminal height to HEIGHT lines
  -l, --length=<LENGTH>     limit output to LENGTH lines
  -?, --help                display help and exit
  -v, --version             display the version number and exit
EOF
}

invalid()
{
    echo "${0##*/}: Unknown option '$1'"
    echo "${0##*/}: Try '$0 --help' for more information."
}

# TODO: Support $length
preview()
{
    mimetype=$(file --mime-type --mime-encoding --brief --dereference "$1")

    if [ -n "$header" ]; then
        header "$1" "$mimetype"
    fi

    if [ "${mimetype:0:15}" == "inode/directory" ]; then
        # TODO: Fallback to ls
        eza --all --long --git --color=always "$1"
    elif [ "${mimetype:0:6}" == "image/" ]; then
        preview_image "$1"
    elif [ "${mimetype:0:6}" == "video/" ]; then
        ffmpeg -i "$1" -vframes 1 -f image2 - 2> /dev/null | preview_image
    elif [ "${mimetype: -14}" == "charset=binary" ]; then
        7z l "$1" 2> /dev/null | sed '1,/^--/d'
        if [ "${PIPESTATUS[0]}" != "0" ]; then
            hexyl --length=4KiB "$1"
        fi
    elif [ "${1: -3}" == ".md" ]; then
        glow --style dark "$1" | bat --style=numbers --color=always --terminal-width "$width" --wrap auto --line-range :500
    else
        bat --style=numbers --color=always --terminal-width "$width" --wrap auto --line-range :500 "$1"
    fi
}

preview_image()
{
    if [[ -n "$TMUX" && -z "$TMUX_PANE" ]]; then
        # Disable unsupported image protocols inside tmux popup
        chafa --format symbols --animate off --size "$width"x"$height" ${1:+"$1"}
    else
        chafa --size "$width"x"$height" ${1:+"$1"}
    fi
}

# TODO: Clean this up...
header()
{
    # TODO: Fallback to ls
    if [ "${2:0:15}" == "inode/directory" ]; then
        # name="üìÅ $(ls -lahd --color=always "$1" | awk -F " " -v dir="$(dirname "$1")/" -v yellow="$yellow" -v normal="$normal" {'for (i = 10; i <= NF; i++) { $9 = $9 " " $i }; sub(dir, "", $9); print $9 " " yellow $5 normal'} )  $(set -- "$file"/*; echo $#) files"
        name="üìÅ $(eza -lad --color=always --no-permissions --no-user --no-time "$1" | awk -F " " -v dir="$(dirname "$1")/" {'for (i = 3; i <= NF; i++) { $2 = $2 " " $i }; sub(dir, "", $2); print $2'} )  $(set -- "$1"/*; echo $#) files"
    else
        # name="üìÑ $(ls -lah --color=always "$1" | awk -F " " -v dir="$(dirname "$1")/" -v yellow="$yellow" -v normal="$normal" {'for (i = 10; i <= NF; i++) { $9 = $9 " " $i }; sub(dir, "", $9); print $9 "  " yellow $5 normal'} )"
        name="üìÑ $(eza -la --color=always --no-permissions --no-user --no-time "$1" | awk -F " " -v dir="$(dirname "$1")/" {'for (i = 3; i <= NF; i++) { $2 = $2 " " $i }; sub(dir, "", $2); print $2 "  " $1 "B"'} )"
    fi
    colorless=$(echo "$name" | sed $'s,\x1b\\[[0-9;]*[a-zA-Z],,g')
    remain=$((width - ${#colorless} - margin))
    if [ $remain -le 0 ]; then
        info=""
    else
        info="  "$(file --brief "$1")

        if [ ${#info} -ge $remain ]; then
            half=$(((remain - 3) / 2))
            info=${info:0:$half}‚Ä¶${info:$((-half + remain % 2 - 1))}
        else
            info=$(printf '%*s' "$((remain - 2 - ${#info}))")$info
        fi
    fi

    echo "$name$italic$dim$info$normal"
    printf "$dim%*s$normal\n" "$width" '' | tr ' ' '‚Äï'
}

files=()
header=
margin=0
width=${FZF_PREVIEW_COLUMNS:-${COLUMNS:-$(tput cols)}}
height=${FZF_PREVIEW_LINES:-${LINES:-$(tput lines)}}
length=

if [ -z "$FZF_PREVIEW_COLUMNS" ]; then
    ((height--))
else
    margin=8
fi

while [[ $# -gt 0 ]]; do
    case $1 in
        -#|--header)     header=1;         shift ;;
        -m|--margin)     margin="$2";      shift; shift ;;
        -m=*|--margin=*) margin="${1#*=}"; shift ;;
        -w|--width)      width="$2";       shift; shift ;;
        -w=*|--width=*)  width="${1#*=}";  shift ;;
        -h|--height)     height="$2";      shift; shift ;;
        -h=*|--height=*) height="${1#*=}"; shift ;;
        -l|--length)     length="$2";      shift; shift ;;
        -l=*|--length=*) length="${1#*=}"; shift ;;
        -\?|--help)      usage;            exit 1 ;;
        -v|--version)    version;          exit 1 ;;
        -*|--*)          invalid "$1";     exit 1 ;;
        *)               files+=("$1");    shift ;;
    esac
done

if [ -n "$header" ]; then
    height=$((height - 2))
fi

if [ ${#files[@]} -eq 0 ]; then
    version; echo ""; usage; exit 1
fi

for file in "${files[@]}"
do
    preview "$file"
done